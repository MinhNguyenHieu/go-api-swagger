// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countRoles = `-- name: CountRoles :one
SELECT COUNT(*) FROM roles
`

func (q *Queries) CountRoles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_reset_tokens (
    email,
    token,
    created_at
) VALUES (
    $1, $2, $3
) RETURNING email, token, created_at
`

type CreatePasswordResetTokenParams struct {
	Email     string       `json:"email"`
	Token     string       `json:"token"`
	CreatedAt sql.NullTime `json:"created_at"`
}

// Password Reset Tokens Queries
func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, createPasswordResetToken, arg.Email, arg.Token, arg.CreatedAt)
	var i PasswordResetToken
	err := row.Scan(&i.Email, &i.Token, &i.CreatedAt)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    name,
    description
) VALUES (
    $1, $2
) RETURNING id, name, description, created_at, updated_at
`

type CreateRoleParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// Roles Queries
func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    user_id,
    ip_address,
    user_agent,
    payload,
    last_activity
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, ip_address, user_agent, payload, last_activity
`

type CreateSessionParams struct {
	ID           string         `json:"id"`
	UserID       sql.NullInt32  `json:"user_id"`
	IpAddress    sql.NullString `json:"ip_address"`
	UserAgent    sql.NullString `json:"user_agent"`
	Payload      string         `json:"payload"`
	LastActivity int32          `json:"last_activity"`
}

// Sessions Queries
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Payload,
		arg.LastActivity,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Payload,
		&i.LastActivity,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    email,
    role_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
	RoleID         int32  `json:"role_id"`
}

// Users Queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE last_activity < $1
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context, lastActivity int32) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions, lastActivity)
	return err
}

const deletePasswordResetToken = `-- name: DeletePasswordResetToken :exec
DELETE FROM password_reset_tokens
WHERE email = $1
`

func (q *Queries) DeletePasswordResetToken(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deletePasswordResetToken, email)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
SELECT email, token, created_at FROM password_reset_tokens
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, email string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetToken, email)
	var i PasswordResetToken
	err := row.Scan(&i.Email, &i.Token, &i.CreatedAt)
	return i, err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, description, created_at, updated_at FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name, description, created_at, updated_at FROM roles
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, ip_address, user_agent, payload, last_activity FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSessionByID(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Payload,
		&i.LastActivity,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, description, created_at, updated_at FROM roles
ORDER BY id
LIMIT $2 OFFSET $1
`

type ListRolesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at FROM users
ORDER BY id
LIMIT $2 OFFSET $1
`

type ListUsersParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.EmailVerifiedAt,
			&i.RoleID,
			&i.RememberTokenUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreUser = `-- name: RestoreUser :one
UPDATE users
SET
    deleted_at = NULL,
    updated_at = NOW()
WHERE id = $1
RETURNING id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at
`

func (q *Queries) RestoreUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, restoreUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :one
UPDATE users
SET
    deleted_at = NOW(),
    updated_at = NOW()
WHERE id = $1
RETURNING id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, softDeleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET
    name = $2,
    description = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

type UpdateRoleParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.ID, arg.Name, arg.Description)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET
    user_id = $2,
    ip_address = $3,
    user_agent = $4,
    payload = $5,
    last_activity = $6
WHERE id = $1
RETURNING id, user_id, ip_address, user_agent, payload, last_activity
`

type UpdateSessionParams struct {
	ID           string         `json:"id"`
	UserID       sql.NullInt32  `json:"user_id"`
	IpAddress    sql.NullString `json:"ip_address"`
	UserAgent    sql.NullString `json:"user_agent"`
	Payload      string         `json:"payload"`
	LastActivity int32          `json:"last_activity"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession,
		arg.ID,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
		arg.Payload,
		arg.LastActivity,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.Payload,
		&i.LastActivity,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = $2,
    hashed_password = $3,
    email = $4,
    email_verified_at = $5,
    role_id = $6,
    remember_token_uuid = $7,
    updated_at = NOW(),
    deleted_at = $8
WHERE id = $1
RETURNING id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID                int32          `json:"id"`
	Username          string         `json:"username"`
	HashedPassword    string         `json:"hashed_password"`
	Email             string         `json:"email"`
	EmailVerifiedAt   sql.NullTime   `json:"email_verified_at"`
	RoleID            int32          `json:"role_id"`
	RememberTokenUuid sql.NullString `json:"remember_token_uuid"`
	DeletedAt         sql.NullTime   `json:"deleted_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.EmailVerifiedAt,
		arg.RoleID,
		arg.RememberTokenUuid,
		arg.DeletedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET
    role_id = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at
`

type UpdateUserRoleParams struct {
	ID     int32 `json:"id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserRole, arg.ID, arg.RoleID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :one
UPDATE users
SET
    email_verified_at = NOW(),
    updated_at = NOW()
WHERE id = $1
RETURNING id, username, hashed_password, email, email_verified_at, role_id, remember_token_uuid, created_at, updated_at, deleted_at
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, verifyUserEmail, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.RoleID,
		&i.RememberTokenUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
